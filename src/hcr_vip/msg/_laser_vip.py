"""autogenerated by genmsg_py from laser_vip.msg. Do not edit."""
import roslib.message
import struct


class laser_vip(roslib.message.Message):
  _md5sum = "e73dc269eca68298ea43af26934ac6d0"
  _type = "hcr_vip/laser_vip"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 min
int32 angle_min
float64 straight
int32 angle_straight
float64 right
int32 angle_right
float64 left
int32 angle_left


"""
  __slots__ = ['min','angle_min','straight','angle_straight','right','angle_right','left','angle_left']
  _slot_types = ['float64','int32','float64','int32','float64','int32','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       min,angle_min,straight,angle_straight,right,angle_right,left,angle_left
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(laser_vip, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.min is None:
        self.min = 0.
      if self.angle_min is None:
        self.angle_min = 0
      if self.straight is None:
        self.straight = 0.
      if self.angle_straight is None:
        self.angle_straight = 0
      if self.right is None:
        self.right = 0.
      if self.angle_right is None:
        self.angle_right = 0
      if self.left is None:
        self.left = 0.
      if self.angle_left is None:
        self.angle_left = 0
    else:
      self.min = 0.
      self.angle_min = 0
      self.straight = 0.
      self.angle_straight = 0
      self.right = 0.
      self.angle_right = 0
      self.left = 0.
      self.angle_left = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_didididi.pack(_x.min, _x.angle_min, _x.straight, _x.angle_straight, _x.right, _x.angle_right, _x.left, _x.angle_left))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.min, _x.angle_min, _x.straight, _x.angle_straight, _x.right, _x.angle_right, _x.left, _x.angle_left,) = _struct_didididi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_didididi.pack(_x.min, _x.angle_min, _x.straight, _x.angle_straight, _x.right, _x.angle_right, _x.left, _x.angle_left))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.min, _x.angle_min, _x.straight, _x.angle_straight, _x.right, _x.angle_right, _x.left, _x.angle_left,) = _struct_didididi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_didididi = struct.Struct("<didididi")
