#include <ros/ros.h>
#include <joy/Joy.h>
#include "geometry_msgs/Twist.h"
#include 
turtlesim/Velocity.h>
#include <signal.h>
#include <termios.h>
using geometry_msgs::Twist;
using namespace std;

class FalconController
{
public:
    FalconController();


private:
    static int x;
    void joyCallback(const joy::Joy::ConstPtr& joy);
    ros::NodeHandle nh_;

    int linear_, angular_;
    double l_scale_, a_scale_;
    ros::Publisher vel_pub_;
    ros::Subscriber joy_sub_;
    Twist vel;
    double start1, start2;  
};
/*
void quit(int sig)
   {
     tcsetattr(kfd, TCSANOW, &cooked);
     ros::shutdown();
     exit(0);
   } 
*/
FalconController::FalconController():
  linear_(1),
  angular_(0)
{

    nh_.param("axis_linear", linear_, linear_);
    nh_.param("axis_angular", angular_, angular_);
    nh_.param("scale_angular", a_scale_, a_scale_);
    nh_.param("scale_linear", l_scale_, l_scale_);

    //For normal operation please uncomment the line below and comment the next one.
    //vel_pub_ = nh_.advertise<Twist>("/RosAria/cmd_vel", 1);
    vel_pub_ = nh_.advertise<turtlesim::Velocity>("turtle1/command_velocity", 1);
    joy_sub_ = nh_.subscribe<joy::Joy>("falconJoy", 10, &FalconController::joyCallback, this);
}

void FalconController::joyCallback(const joy::Joy::ConstPtr& joy)
{

  //turtlesim::Velocity vel;
  //vel.angular.z = a_scale_*joy->axes[angular_];
  //vel.linear.x = l_scale_*joy->axes[linear_];

//if (joy->buttons[2] == 1){
if (FalconController::x<100){
    start1 += joy->axes[0];
    start2 += joy->axes[1];
    FalconController::x++;
    ROS_DEBUG("x<100");	
    cout<<start1<<endl;
}

if (FalconController::x==100){
    double t =  100.0;
    start1/=t;
    start2/=t;
    FalconController::x++;
}


if (FalconController::x>=100){
    vel.angular.z = 100 * (joy->axes[0] - start1);
    vel.linear.x = 100 * (joy->axes[1] - start2);
    cout<<start1<< "  " << joy->axes[0]<<"  "<<x<<endl;
    FalconController::x++;
}
double test = 0.5;

if((vel.angular.z < test) && (vel.linear.x < test) && (FalconController::x>100)){
	FalconController::x=0;
	cout<<"eise vlakas"<<endl;
}



//}
//else{
//vel.angular.z = joy->axes[0];
//vel.linear.x = joy->axes[1];
//}
	



ROS_DEBUG("YES");
puts("GET");
  vel_pub_.publish(vel);

}


int main(int argc, char** argv)
{
  //x=0;	
  ros::init(argc, argv, "FalconController");
  FalconController falconController;

  ros::spin();
}

int FalconController::x = 0;
