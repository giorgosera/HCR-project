/* Auto-generated by genmsg_cpp for file /home/robofriend/ros_workspace/hcr_vip/msg/sonar_vip.msg */
#ifndef HCR_VIP_MESSAGE_SONAR_VIP_H
#define HCR_VIP_MESSAGE_SONAR_VIP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace hcr_vip
{
template <class ContainerAllocator>
struct sonar_vip_ {
  typedef sonar_vip_<ContainerAllocator> Type;

  sonar_vip_()
  : distance_front(0.0)
  , angle_front(0)
  , distance_back(0.0)
  , angle_back(0)
  , turn_left(0.0)
  , turn_left_sensor()
  , turn_right(0.0)
  , turn_right_sensor()
  {
  }

  sonar_vip_(const ContainerAllocator& _alloc)
  : distance_front(0.0)
  , angle_front(0)
  , distance_back(0.0)
  , angle_back(0)
  , turn_left(0.0)
  , turn_left_sensor(_alloc)
  , turn_right(0.0)
  , turn_right_sensor(_alloc)
  {
  }

  typedef double _distance_front_type;
  double distance_front;

  typedef int32_t _angle_front_type;
  int32_t angle_front;

  typedef double _distance_back_type;
  double distance_back;

  typedef int32_t _angle_back_type;
  int32_t angle_back;

  typedef double _turn_left_type;
  double turn_left;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _turn_left_sensor_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  turn_left_sensor;

  typedef double _turn_right_type;
  double turn_right;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _turn_right_sensor_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  turn_right_sensor;


private:
  static const char* __s_getDataType_() { return "hcr_vip/sonar_vip"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ee8100ffc8e6dc1410f852f63a502f01"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 distance_front\n\
int32 angle_front\n\
float64 distance_back\n\
int32 angle_back\n\
float64 turn_left\n\
string turn_left_sensor\n\
float64 turn_right\n\
string turn_right_sensor\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, distance_front);
    ros::serialization::serialize(stream, angle_front);
    ros::serialization::serialize(stream, distance_back);
    ros::serialization::serialize(stream, angle_back);
    ros::serialization::serialize(stream, turn_left);
    ros::serialization::serialize(stream, turn_left_sensor);
    ros::serialization::serialize(stream, turn_right);
    ros::serialization::serialize(stream, turn_right_sensor);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, distance_front);
    ros::serialization::deserialize(stream, angle_front);
    ros::serialization::deserialize(stream, distance_back);
    ros::serialization::deserialize(stream, angle_back);
    ros::serialization::deserialize(stream, turn_left);
    ros::serialization::deserialize(stream, turn_left_sensor);
    ros::serialization::deserialize(stream, turn_right);
    ros::serialization::deserialize(stream, turn_right_sensor);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(distance_front);
    size += ros::serialization::serializationLength(angle_front);
    size += ros::serialization::serializationLength(distance_back);
    size += ros::serialization::serializationLength(angle_back);
    size += ros::serialization::serializationLength(turn_left);
    size += ros::serialization::serializationLength(turn_left_sensor);
    size += ros::serialization::serializationLength(turn_right);
    size += ros::serialization::serializationLength(turn_right_sensor);
    return size;
  }

  typedef boost::shared_ptr< ::hcr_vip::sonar_vip_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hcr_vip::sonar_vip_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct sonar_vip
typedef  ::hcr_vip::sonar_vip_<std::allocator<void> > sonar_vip;

typedef boost::shared_ptr< ::hcr_vip::sonar_vip> sonar_vipPtr;
typedef boost::shared_ptr< ::hcr_vip::sonar_vip const> sonar_vipConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hcr_vip::sonar_vip_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hcr_vip::sonar_vip_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hcr_vip

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hcr_vip::sonar_vip_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hcr_vip::sonar_vip_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hcr_vip::sonar_vip_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ee8100ffc8e6dc1410f852f63a502f01";
  }

  static const char* value(const  ::hcr_vip::sonar_vip_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xee8100ffc8e6dc14ULL;
  static const uint64_t static_value2 = 0x10f852f63a502f01ULL;
};

template<class ContainerAllocator>
struct DataType< ::hcr_vip::sonar_vip_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hcr_vip/sonar_vip";
  }

  static const char* value(const  ::hcr_vip::sonar_vip_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hcr_vip::sonar_vip_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 distance_front\n\
int32 angle_front\n\
float64 distance_back\n\
int32 angle_back\n\
float64 turn_left\n\
string turn_left_sensor\n\
float64 turn_right\n\
string turn_right_sensor\n\
\n\
\n\
";
  }

  static const char* value(const  ::hcr_vip::sonar_vip_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hcr_vip::sonar_vip_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.distance_front);
    stream.next(m.angle_front);
    stream.next(m.distance_back);
    stream.next(m.angle_back);
    stream.next(m.turn_left);
    stream.next(m.turn_left_sensor);
    stream.next(m.turn_right);
    stream.next(m.turn_right_sensor);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct sonar_vip_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hcr_vip::sonar_vip_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hcr_vip::sonar_vip_<ContainerAllocator> & v) 
  {
    s << indent << "distance_front: ";
    Printer<double>::stream(s, indent + "  ", v.distance_front);
    s << indent << "angle_front: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle_front);
    s << indent << "distance_back: ";
    Printer<double>::stream(s, indent + "  ", v.distance_back);
    s << indent << "angle_back: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle_back);
    s << indent << "turn_left: ";
    Printer<double>::stream(s, indent + "  ", v.turn_left);
    s << indent << "turn_left_sensor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.turn_left_sensor);
    s << indent << "turn_right: ";
    Printer<double>::stream(s, indent + "  ", v.turn_right);
    s << indent << "turn_right_sensor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.turn_right_sensor);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HCR_VIP_MESSAGE_SONAR_VIP_H

